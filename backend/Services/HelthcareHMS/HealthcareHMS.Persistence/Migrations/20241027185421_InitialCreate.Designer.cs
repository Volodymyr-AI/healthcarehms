// <auto-generated />
using System;
using HealthcareHMS.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthcareHMS.Persistence.Migrations
{
    [DbContext(typeof(HealthcareHMSDbContext))]
    [Migration("20241027185421_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("HealthcareHMS.Core.CertificationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Certification")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Certifications");
                });

            modelBuilder.Entity("HealthcareHMS.Core.ConditionTreatedEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("ConditionTreated");
                });

            modelBuilder.Entity("HealthcareHMS.Core.DoctorEntity", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Appointment_Availability")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("TEXT");

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("HospitalId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("MedicalSchool")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("INTEGER");

                    b.HasKey("DoctorId");

                    b.HasIndex("HospitalId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("HealthcareHMS.Core.DoctorPhoneNumberEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorPhoneNumbers");
                });

            modelBuilder.Entity("HealthcareHMS.Core.DoctorWorkinghoursEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Day")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("WorkHours");
                });

            modelBuilder.Entity("HealthcareHMS.Core.HospitalAdminEntity", b =>
                {
                    b.Property<Guid>("HospitalAdminId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AdminName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("HospitalId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("HospitalAdminId");

                    b.ToTable("HospitalAdmins");
                });

            modelBuilder.Entity("HealthcareHMS.Core.HospitalEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("AddGoogleMyBusiness")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("CloseTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmergencyServicesIsAvaliable")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("GlobalAdminId")
                        .HasColumnType("TEXT");

                    b.Property<string>("HospitalName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("OpenTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("HealthcareHMS.Core.HospitalRelatedEntities.HospitalFacilityEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Facility")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("HospitalId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("HospitalFacilities");
                });

            modelBuilder.Entity("HealthcareHMS.Core.HospitalRelatedEntities.HospitalPhoneNumberEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("HospitalId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("HospitalPhoneNumbers");
                });

            modelBuilder.Entity("HealthcareHMS.Core.HospitalRelatedEntities.HospitalServiceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("HospitalId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("HospitalServices");
                });

            modelBuilder.Entity("HealthcareHMS.Core.LicenseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("License")
                        .IsRequired()
                        .HasMaxLength(100000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Licenses");
                });

            modelBuilder.Entity("HealthcareHMS.Core.PractiseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Practise")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Practises");
                });

            modelBuilder.Entity("HealthcareHMS.Core.ServiceProvidedEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("ServiceProvided");
                });

            modelBuilder.Entity("HealthcareHMS.Core.CertificationEntity", b =>
                {
                    b.HasOne("HealthcareHMS.Core.DoctorEntity", "Doctor")
                        .WithMany("Certifications")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HealthcareHMS.Core.ConditionTreatedEntity", b =>
                {
                    b.HasOne("HealthcareHMS.Core.DoctorEntity", "Doctor")
                        .WithMany("Conditions")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HealthcareHMS.Core.DoctorEntity", b =>
                {
                    b.HasOne("HealthcareHMS.Core.HospitalEntity", "Hospital")
                        .WithMany("Doctors")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("HealthcareHMS.Core.DoctorPhoneNumberEntity", b =>
                {
                    b.HasOne("HealthcareHMS.Core.DoctorEntity", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HealthcareHMS.Core.DoctorWorkinghoursEntity", b =>
                {
                    b.HasOne("HealthcareHMS.Core.DoctorEntity", "Doctor")
                        .WithMany("WorkingHours")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HealthcareHMS.Core.HospitalAdminEntity", b =>
                {
                    b.HasOne("HealthcareHMS.Core.HospitalEntity", "Hospital")
                        .WithOne("HospitalAdmin")
                        .HasForeignKey("HealthcareHMS.Core.HospitalAdminEntity", "HospitalAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("HealthcareHMS.Core.HospitalRelatedEntities.HospitalFacilityEntity", b =>
                {
                    b.HasOne("HealthcareHMS.Core.HospitalEntity", "Hospital")
                        .WithMany("HospitalFacilities")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("HealthcareHMS.Core.HospitalRelatedEntities.HospitalPhoneNumberEntity", b =>
                {
                    b.HasOne("HealthcareHMS.Core.HospitalEntity", "Hospital")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("HealthcareHMS.Core.HospitalRelatedEntities.HospitalServiceEntity", b =>
                {
                    b.HasOne("HealthcareHMS.Core.HospitalEntity", "Hospital")
                        .WithMany("HospitalServices")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("HealthcareHMS.Core.LicenseEntity", b =>
                {
                    b.HasOne("HealthcareHMS.Core.DoctorEntity", "Doctor")
                        .WithMany("Licenses")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HealthcareHMS.Core.PractiseEntity", b =>
                {
                    b.HasOne("HealthcareHMS.Core.DoctorEntity", "Doctor")
                        .WithMany("Practises")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HealthcareHMS.Core.ServiceProvidedEntity", b =>
                {
                    b.HasOne("HealthcareHMS.Core.DoctorEntity", "Doctor")
                        .WithMany("ServicesProvided")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HealthcareHMS.Core.DoctorEntity", b =>
                {
                    b.Navigation("Certifications");

                    b.Navigation("Conditions");

                    b.Navigation("Licenses");

                    b.Navigation("Practises");

                    b.Navigation("ServicesProvided");

                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("HealthcareHMS.Core.HospitalEntity", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("HospitalAdmin")
                        .IsRequired();

                    b.Navigation("HospitalFacilities");

                    b.Navigation("HospitalServices");

                    b.Navigation("PhoneNumbers");
                });
#pragma warning restore 612, 618
        }
    }
}
